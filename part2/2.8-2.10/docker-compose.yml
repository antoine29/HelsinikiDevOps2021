version: '3.5' 

services: 
  reverse-proxy:
    image: nginx:mainline-alpine-perl
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    container_name: reverse-proxy
    restart: always

  redis-cache: 
    image: redis:alpine3.14
    container_name: redis-cache
    ports:
      - 6379:6379
    restart: unless-stopped

  db:
    image: postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: password
    container_name: postgres_db
    volumes:
      - ./pgVol:/var/lib/postgresql/data #in this way an internal docker volume is created each time the compose file is started, however the data from the ''./pgVol' will be used

  adminer:
    image: adminer:4
    restart: always
    environment:
      - ADMINER_DESIGN=galkaev
    depends_on:
      - db
    #ports:
    #  - 7070:8080
    container_name: adminer

  backend: 
    image: stack_backend
    container_name: backend
    #ports:
    #  - 8080:8080
    #extra_hosts:
    #  - "host.docker.internal:host-gateway" #since we're using nginx as reverseProxy we dont need reach the backend container from the host
    build:
      context: .
      dockerfile: Dockerfile-Backend
      args:
        redis_host_param: redis-cache
        postgres_host_param: db
        postgres_user_param: postgres
        postgres_password_param: password
        postgres_database_param: postgres
        allowed_origins: http://localhost:5000

  frontend: 
    image: stack_frontend
    container_name: frontend
    ports:
      - 5000:5000
    build:
      context: .
      dockerfile: Dockerfile-Frontend
      args:
        backend_url: http://localhost/api
    
#volumes:
#  pgVol: